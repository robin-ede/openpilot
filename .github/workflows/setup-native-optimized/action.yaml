name: 'Ultra-fast native openpilot setup'
description: 'Optimized native setup to replace Docker for <20s execution time'

inputs:
  is_retried:
    description: 'A mock param that asserts that we use the setup-with-retry instead of this action directly'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # assert that this action is retried using the setup-with-retry
    - shell: bash
      if: ${{ inputs.is_retried == 'false' }}
      run: |
        echo "You should not run this action directly. Use setup-with-retry instead"
        exit 1

    # Multi-cache restoration (parallel where possible)
    - name: Restore APT cache
      id: apt-cache
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.apt-cache
        key: apt-${{ runner.os }}-${{ hashFiles('tools/install_ubuntu_dependencies.sh') }}-v2
        restore-keys: |
          apt-${{ runner.os }}-
    
    - name: Restore Python cache  
      id: python-cache
      uses: actions/cache@v4
      with:
        path: ~/.venv
        key: python-${{ runner.os }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}-v2
        restore-keys: |
          python-${{ runner.os }}-
    
    - name: Restore build cache
      id: build-cache
      uses: actions/cache@v4  
      with:
        path: |
          ~/.ccache
          .ci_cache/scons_cache
        key: build-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          build-${{ runner.os }}-

    # do this after checkout to ensure our custom LFS config is used to pull from GitLab
    - shell: bash
      run: git lfs pull

    # build cache setup for timing compatibility with existing setup
    - id: date
      shell: bash
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
    - shell: bash
      run: echo "$CACHE_COMMIT_DATE"

    # Conditional fast installs
    - name: Install system dependencies
      if: steps.apt-cache.outputs.cache-hit != 'true'
      shell: bash
      run: ./tools/install_ubuntu_dependencies_native.sh
      
    - name: Setup Python environment  
      if: steps.python-cache.outputs.cache-hit != 'true'
      shell: bash
      run: ./tools/install_python_dependencies_uv.sh
      
    # Configure build caching and environment
    - name: Configure build caching and environment
      shell: bash
      run: |
        # Setup ccache for faster C++ builds
        echo 'CCACHE_DIR=~/.ccache' >> $GITHUB_ENV
        echo 'CCACHE_MAXSIZE=2G' >> $GITHUB_ENV
        mkdir -p ~/.ccache
        
        # Configure SCons cache  
        mkdir -p .ci_cache/scons_cache
        
        # Setup parallel compilation
        echo 'MAKEFLAGS=-j2' >> $GITHUB_ENV
        
        # Activate Python virtual environment
        if [ -f ~/.venv/bin/activate ]; then
          echo 'VIRTUAL_ENV=~/.venv' >> $GITHUB_ENV
          echo '~/.venv/bin' >> $GITHUB_PATH
        fi

    # Normalize file permissions for consistency (kept for compatibility)
    - id: normalize-file-permissions
      shell: bash
      name: Normalize file permissions to ensure consistent builds
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \; 2>/dev/null || true
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \; 2>/dev/null || true